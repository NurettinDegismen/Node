//: Playground - noun: a place where people can play

//              15       İkili arama ağacımız bu şekilde olsun.
//             /  \
//           10    20
//          / \    / \
//         5  11  17 25
//S1 Cevap
import UIKit

class Node {
    var value: Int = 0
    var leftChild: Node?
    var rightChild: Node?
    
    init(value: Int, leftChild: Node?, rightChild: Node?) {
        self.value = value
        self.leftChild = leftChild
        self.rightChild = rightChild
    }
}
//sol kol
let besDugumu = Node(value: 5, leftChild: nil, rightChild: nil)
let onbirDugumu = Node(value: 11, leftChild: nil, rightChild: nil)
let onDugumu = Node(value: 10, leftChild: besDugumu, rightChild: onbirDugumu)

//sag kol
let onyediDugumu = Node(value: 17, leftChild: nil, rightChild: nil)
let yirmibesDugumu = Node(value: 25, leftChild: nil, rightChild: nil)
let yirmiDugumu = Node(value: 20, leftChild: onyediDugumu, rightChild: yirmibesDugumu)

//bagımsız kök düğüm
let onbesDugumu = Node(value: 15, leftChild: onDugumu, rightChild: yirmiDugumu)

//: Playground - noun: a place where people can play

import UIKit

//S2 Cevap
//1-2-3 .... 3-2-1
class Node {
    var value: Int
    var next: Node?
    
    init(value:Int, next: Node?) {
        self.value = value
        self.next = next
    }
}

let uc = Node(value: 3, next: nil)
let iki = Node(value: 2, next: uc)
let bir = Node(value: 1, next: iki)

func list(head: Node?) {
    var curNode = head
    while curNode != nil {
        print(curNode?.value ?? -1)
        curNode = curNode?.next
    }
}

list(head: bir) // sıralı saydırma

func returnList(head: Node?) -> Node? {
    var curNode = head
    var prv: Node?
    var next: Node?
    
    while curNode != nil {
        next = curNode?.next
        curNode?.next = prv
        
        prv = curNode
        curNode = next
    }
    return prv
}

print("***************")
let revList = returnList(head: bir)
list(head: revList) // geriye doğru döndürme
